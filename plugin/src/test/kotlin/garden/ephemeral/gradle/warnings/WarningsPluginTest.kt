/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package garden.ephemeral.gradle.warnings

import assertk.assertThat
import assertk.assertions.*
import org.gradle.testfixtures.ProjectBuilder
import org.junit.jupiter.api.Test
import java.io.File

/**
 * A simple unit test for the 'garden.ephemeral.gradle.warnings.greeting' plugin.
 */
class WarningsPluginTest {

    @Test
    fun `plugin adds warnings extension to compile task`() {
        val project = ProjectBuilder.builder().build()
        project.plugins.apply("java")
        project.plugins.apply("garden.ephemeral.warnings")

        val extension = project.tasks.getByName("compileJava")
            .extensions.findByName("warnings")

        // https://github.com/willowtreeapps/assertk/issues/393
        assertThat(extension).isNotNull()
        assertThat(extension!!).isInstanceOf(WarningsOptionsExtension::class.java)
    }

    @Test
    fun `plugin sets default warning dump location`() {
        val project = ProjectBuilder.builder().build()
        project.plugins.apply("java")
        project.plugins.apply("garden.ephemeral.warnings")

        val extension = project.tasks.getByName("compileJava")
            .extensions.findByName("warnings")
        val warningDump = (extension as WarningsOptionsExtension).warningDump.get().asFile
        val warningDumpPath = warningDump.path.replace(File.separatorChar, '/')

        assertThat(warningDumpPath).endsWith("/build/compileJava.stderr")
    }

    @Test
    fun `plugin registers task`() {
        val project = ProjectBuilder.builder().build()
        project.plugins.apply("garden.ephemeral.warnings")

        val task = project.tasks.findByName("warningsReport")

        assertThat(task).isNotNull()
        assertThat(task!!).isInstanceOf(WarningsReport::class.java)
    }

    @Test
    fun `plugin enables only HTML by default`() {
        val project = ProjectBuilder.builder().build()
        project.plugins.apply("garden.ephemeral.warnings")

        val task = project.tasks.findByName("warningsReport") as WarningsReport
        assertThat(task.reports.html.required.get()).isEqualTo(true)
        assertThat(task.reports.enabledReports).hasSize(1)
    }

    @Test
    fun `plugin sets default HTML report location`() {
        val project = ProjectBuilder.builder().build()
        project.plugins.apply("garden.ephemeral.warnings")

        val task = project.tasks.findByName("warningsReport") as WarningsReport
        val htmlOutput = task.reports.html.destination
        val htmlOutputPath = htmlOutput.path.replace(File.separatorChar, '/')

        assertThat(htmlOutputPath).endsWith("/build/reports/warnings")
    }

    @Test
    fun `plugin sets default CSV report location`() {
        val project = ProjectBuilder.builder().build()
        project.plugins.apply("garden.ephemeral.warnings")

        val task = project.tasks.findByName("warningsReport") as WarningsReport
        val csvOutput = task.reports.csv.destination
        val csvOutputPath = csvOutput.path.replace(File.separatorChar, '/')

        assertThat(csvOutputPath).endsWith("/build/reports/warnings/warnings.csv")
    }

    @Test
    fun `plugin sets default JSON report location`() {
        val project = ProjectBuilder.builder().build()
        project.plugins.apply("garden.ephemeral.warnings")

        val task = project.tasks.findByName("warningsReport") as WarningsReport
        val jsonOutput = task.reports.json.destination
        val jsonOutputPath = jsonOutput.path.replace(File.separatorChar, '/')

        assertThat(jsonOutputPath).endsWith("/build/reports/warnings/warnings.json")
    }
}
