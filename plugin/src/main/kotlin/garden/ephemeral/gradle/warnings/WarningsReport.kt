package garden.ephemeral.gradle.warnings

import garden.ephemeral.gradle.warnings.internal.*
import org.gradle.api.Action
import org.gradle.api.DefaultTask
import org.gradle.api.file.ConfigurableFileCollection
import org.gradle.api.internal.CollectionCallbackActionDecorator
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.Nested
import org.gradle.api.tasks.TaskAction
import org.gradle.internal.reflect.Instantiator
import java.io.File
import javax.inject.Inject


abstract class WarningsReport: DefaultTask() {

    /**
     * The collection of all warning dump files making up the input to the report.
     */
    @get:InputFiles
    abstract val warningDumps: ConfigurableFileCollection

    @get:Inject
    protected abstract val instantiator: Instantiator

    @get:Inject
    protected abstract val callbackActionDecorator: CollectionCallbackActionDecorator

    /**
     * Container for the reports generated by the task.
     */
    @get:Nested
    val reports: WarningsReportContainer by lazy {
        instantiator.newInstance(DefaultWarningsReportContainer::class.java, this, callbackActionDecorator)
    }

    /**
     * Configures the reports.
     *
     * @param configureAction action to configure the reports.
     * @return the report container.
     */
    fun reports(configureAction: Action<in WarningsReportContainer>): WarningsReportContainer {
        configureAction.execute(reports)
        return reports
    }

    /**
     * Generates the report.
     */
    @TaskAction
    fun generateReport() {
        val parser = WarningsParser()
        warningDumps.files
            .filter(File::exists)
            .forEach(parser::parse)

        val model = parser.createReportModel()

        if (reports.html.required.get()) {
            HtmlReportGenerator(project).generateReport(reports.html, model)
        }
        if (reports.csv.required.get()) {
            CsvReportGenerator(project).generateReport(reports.csv, model)
        }
        if (reports.json.required.get()) {
            JsonReportGenerator(project).generateReport(reports.json, model)
        }
    }
}