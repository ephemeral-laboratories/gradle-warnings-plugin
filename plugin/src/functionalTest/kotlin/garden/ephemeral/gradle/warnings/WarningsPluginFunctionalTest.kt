/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package garden.ephemeral.gradle.warnings

import assertk.all
import assertk.assertThat
import assertk.assertions.contains
import assertk.assertions.exists
import assertk.assertions.isEqualTo
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir
import java.io.File
import java.nio.file.Files

/**
 * A simple functional test for the 'garden.ephemeral.gradle.warnings.greeting' plugin.
 */
class WarningsPluginFunctionalTest {

    @TempDir
    lateinit var projectDir: File

    @Test
    fun `task runs and produces the expected report`() {
        writeEmptySettingsScript()
        writeBuildScript()
        writeFile("src/main/java/Blah.java", """
            import java.util.ArrayList;
            import java.util.List;
            public class Blah {
                private List<String> fish = (List<String>) new ArrayList();
            }
        """.trimIndent())

        val result = runTask()

        assertThat(result.task(":warningsReport")!!.outcome).isEqualTo(TaskOutcome.SUCCESS)

        val report = projectDir.resolve("build/reports/warnings/index.html").readText()
        assertThat(report).all {
            contains("<p>Total warnings: <strong>2</strong></p>")
            contains("<td><a href=\"#warning/rawtypes\">warning/rawtypes</a></td>")
            contains("<table id=\"warning/rawtypes\">")
            contains("<td>src/main/java/Blah.java:4</td>")
        }
    }

    @Test
    fun `dump file location can be configured`() {
        writeEmptySettingsScript()
        writeBuildScript("""
            tasks.named<JavaCompile>("compileJava") {
                extensions.configure<garden.ephemeral.gradle.warnings.WarningsOptionsExtension> {
                    warningDump.set(file("${"$"}buildDir/newLocation.log"))
                }
            }
        """.trimIndent())
        writeEmptyClass()

        val result = runTask()

        assertThat(result.task(":warningsReport")!!.outcome).isEqualTo(TaskOutcome.SUCCESS)
        assertThat(projectDir.resolve("build/newLocation.log")).exists()
    }

    @Test
    fun `report can be disabled`() {
        writeEmptySettingsScript()
        writeBuildScript("""
            tasks.named<garden.ephemeral.gradle.warnings.WarningsReport>("warningsReport") {
                reports {
                    html.required.set(false)
                }
            }
        """.trimIndent())
        writeEmptyClass()

        val result = runTask()

        assertThat(result.task(":warningsReport")!!.outcome).isEqualTo(TaskOutcome.SUCCESS)
    }

    @Test
    fun `location of report can be configured`() {
        writeEmptySettingsScript()
        writeBuildScript("""
            tasks.named<garden.ephemeral.gradle.warnings.WarningsReport>("warningsReport") {
                reports {
                    html.outputLocation.set(file("${"$"}buildDir/custom"))
                }
            }
        """.trimIndent())
        writeEmptyClass()

        val result = runTask()

        assertThat(result.task(":warningsReport")!!.outcome).isEqualTo(TaskOutcome.SUCCESS)

        assertThat(projectDir.resolve("build/custom/index.html")).exists()
    }

    private fun writeEmptySettingsScript() = writeFile("settings.gradle.kts", "")

    private fun writeBuildScript(extra: String = "") = writeFile("build.gradle.kts", """
        plugins {
            id("java")
            id("garden.ephemeral.warnings")
        }
        tasks.named<JavaCompile>("compileJava") {
            options.compilerArgs.add("-Xlint")
        }
    """.trimIndent() + "\n" + extra)

    private fun runTask() = GradleRunner.create()
        // Useful for diagnosing issues:
        //.forwardOutput()
        .withPluginClasspath()
        .withArguments("warningsReport", "--stacktrace")
        .withProjectDir(projectDir)
        .build()

    private fun writeEmptyClass() = writeFile("src/main/java/Blah.java", """
        public class Blah {
        }
    """.trimIndent())

    private fun writeFile(relativePath: String, text: String) {
        val file = projectDir.resolve(relativePath)
        val parentDir = file.parentFile
        Files.createDirectories(parentDir.toPath())
        file.writeText(text)
    }
}
